# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from snakeskin.protos.msp.msp_principal_pb2 import (
    MSPPrincipal as snakeskin___protos___msp___msp_principal_pb2___MSPPrincipal,
)

from typing import (
    Iterable as typing___Iterable,
    List as typing___List,
    Optional as typing___Optional,
    Text as typing___Text,
    Tuple as typing___Tuple,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class Policy(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class PolicyType(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> Policy.PolicyType: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[Policy.PolicyType]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, Policy.PolicyType]]: ...
        UNKNOWN = typing___cast(Policy.PolicyType, 0)
        SIGNATURE = typing___cast(Policy.PolicyType, 1)
        MSP = typing___cast(Policy.PolicyType, 2)
        IMPLICIT_META = typing___cast(Policy.PolicyType, 3)
    UNKNOWN = typing___cast(Policy.PolicyType, 0)
    SIGNATURE = typing___cast(Policy.PolicyType, 1)
    MSP = typing___cast(Policy.PolicyType, 2)
    IMPLICIT_META = typing___cast(Policy.PolicyType, 3)

    type = ... # type: int
    value = ... # type: bytes

    def __init__(self,
        *,
        type : typing___Optional[int] = None,
        value : typing___Optional[bytes] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> Policy: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"type",u"value"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"type",b"type",u"value",b"value"]) -> None: ...

class SignaturePolicyEnvelope(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    version = ... # type: int

    @property
    def rule(self) -> SignaturePolicy: ...

    @property
    def identities(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[snakeskin___protos___msp___msp_principal_pb2___MSPPrincipal]: ...

    def __init__(self,
        *,
        version : typing___Optional[int] = None,
        rule : typing___Optional[SignaturePolicy] = None,
        identities : typing___Optional[typing___Iterable[snakeskin___protos___msp___msp_principal_pb2___MSPPrincipal]] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> SignaturePolicyEnvelope: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"rule"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"identities",u"rule",u"version"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"rule",b"rule"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"identities",b"identities",u"rule",b"rule",u"version",b"version"]) -> None: ...

class SignaturePolicy(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class NOutOf(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        n = ... # type: int

        @property
        def rules(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[SignaturePolicy]: ...

        def __init__(self,
            *,
            n : typing___Optional[int] = None,
            rules : typing___Optional[typing___Iterable[SignaturePolicy]] = None,
            ) -> None: ...
        @classmethod
        def FromString(cls, s: bytes) -> SignaturePolicy.NOutOf: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"n",u"rules"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"n",b"n",u"rules",b"rules"]) -> None: ...

    signed_by = ... # type: int

    @property
    def n_out_of(self) -> SignaturePolicy.NOutOf: ...

    def __init__(self,
        *,
        signed_by : typing___Optional[int] = None,
        n_out_of : typing___Optional[SignaturePolicy.NOutOf] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> SignaturePolicy: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"Type",u"n_out_of",u"signed_by"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"Type",u"n_out_of",u"signed_by"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"Type",b"Type",u"n_out_of",b"n_out_of",u"signed_by",b"signed_by"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"Type",b"Type",u"n_out_of",b"n_out_of",u"signed_by",b"signed_by"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"Type",b"Type"]) -> typing_extensions___Literal["signed_by","n_out_of"]: ...

class ImplicitMetaPolicy(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class Rule(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> ImplicitMetaPolicy.Rule: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[ImplicitMetaPolicy.Rule]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, ImplicitMetaPolicy.Rule]]: ...
        ANY = typing___cast(ImplicitMetaPolicy.Rule, 0)
        ALL = typing___cast(ImplicitMetaPolicy.Rule, 1)
        MAJORITY = typing___cast(ImplicitMetaPolicy.Rule, 2)
    ANY = typing___cast(ImplicitMetaPolicy.Rule, 0)
    ALL = typing___cast(ImplicitMetaPolicy.Rule, 1)
    MAJORITY = typing___cast(ImplicitMetaPolicy.Rule, 2)

    sub_policy = ... # type: typing___Text
    rule = ... # type: ImplicitMetaPolicy.Rule

    def __init__(self,
        *,
        sub_policy : typing___Optional[typing___Text] = None,
        rule : typing___Optional[ImplicitMetaPolicy.Rule] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> ImplicitMetaPolicy: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"rule",u"sub_policy"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"rule",b"rule",u"sub_policy",b"sub_policy"]) -> None: ...
