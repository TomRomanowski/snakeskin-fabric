# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    List as typing___List,
    Optional as typing___Optional,
    Tuple as typing___Tuple,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class KafkaMessage(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def regular(self) -> KafkaMessageRegular: ...

    @property
    def time_to_cut(self) -> KafkaMessageTimeToCut: ...

    @property
    def connect(self) -> KafkaMessageConnect: ...

    def __init__(self,
        *,
        regular : typing___Optional[KafkaMessageRegular] = None,
        time_to_cut : typing___Optional[KafkaMessageTimeToCut] = None,
        connect : typing___Optional[KafkaMessageConnect] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> KafkaMessage: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"Type",u"connect",u"regular",u"time_to_cut"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"Type",u"connect",u"regular",u"time_to_cut"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"Type",b"Type",u"connect",b"connect",u"regular",b"regular",u"time_to_cut",b"time_to_cut"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"Type",b"Type",u"connect",b"connect",u"regular",b"regular",u"time_to_cut",b"time_to_cut"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"Type",b"Type"]) -> typing_extensions___Literal["regular","time_to_cut","connect"]: ...

class KafkaMessageRegular(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class Class(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> KafkaMessageRegular.Class: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[KafkaMessageRegular.Class]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, KafkaMessageRegular.Class]]: ...
        UNKNOWN = typing___cast(KafkaMessageRegular.Class, 0)
        NORMAL = typing___cast(KafkaMessageRegular.Class, 1)
        CONFIG = typing___cast(KafkaMessageRegular.Class, 2)
    UNKNOWN = typing___cast(KafkaMessageRegular.Class, 0)
    NORMAL = typing___cast(KafkaMessageRegular.Class, 1)
    CONFIG = typing___cast(KafkaMessageRegular.Class, 2)

    payload = ... # type: bytes
    config_seq = ... # type: int
    original_offset = ... # type: int

    def __init__(self,
        *,
        payload : typing___Optional[bytes] = None,
        config_seq : typing___Optional[int] = None,
        original_offset : typing___Optional[int] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> KafkaMessageRegular: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"class",u"config_seq",u"original_offset",u"payload"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"class",b"class",u"config_seq",b"config_seq",u"original_offset",b"original_offset",u"payload",b"payload"]) -> None: ...

class KafkaMessageTimeToCut(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    block_number = ... # type: int

    def __init__(self,
        *,
        block_number : typing___Optional[int] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> KafkaMessageTimeToCut: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"block_number"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"block_number",b"block_number"]) -> None: ...

class KafkaMessageConnect(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    payload = ... # type: bytes

    def __init__(self,
        *,
        payload : typing___Optional[bytes] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> KafkaMessageConnect: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"payload"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"payload",b"payload"]) -> None: ...

class KafkaMetadata(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    last_offset_persisted = ... # type: int
    last_original_offset_processed = ... # type: int
    last_resubmitted_config_offset = ... # type: int

    def __init__(self,
        *,
        last_offset_persisted : typing___Optional[int] = None,
        last_original_offset_processed : typing___Optional[int] = None,
        last_resubmitted_config_offset : typing___Optional[int] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> KafkaMetadata: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"last_offset_persisted",u"last_original_offset_processed",u"last_resubmitted_config_offset"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"last_offset_persisted",b"last_offset_persisted",u"last_original_offset_processed",b"last_original_offset_processed",u"last_resubmitted_config_offset",b"last_resubmitted_config_offset"]) -> None: ...
