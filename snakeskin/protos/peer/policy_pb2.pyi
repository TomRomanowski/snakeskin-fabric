# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from snakeskin.protos.common.policies_pb2 import (
    SignaturePolicyEnvelope as snakeskin___protos___common___policies_pb2___SignaturePolicyEnvelope,
)

from typing import (
    Optional as typing___Optional,
    Text as typing___Text,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class ApplicationPolicy(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    channel_config_policy_reference = ... # type: typing___Text

    @property
    def signature_policy(self) -> snakeskin___protos___common___policies_pb2___SignaturePolicyEnvelope: ...

    def __init__(self,
        *,
        signature_policy : typing___Optional[snakeskin___protos___common___policies_pb2___SignaturePolicyEnvelope] = None,
        channel_config_policy_reference : typing___Optional[typing___Text] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> ApplicationPolicy: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"Type",u"channel_config_policy_reference",u"signature_policy"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"Type",u"channel_config_policy_reference",u"signature_policy"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"Type",b"Type",u"channel_config_policy_reference",b"channel_config_policy_reference",u"signature_policy",b"signature_policy"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"Type",b"Type",u"channel_config_policy_reference",b"channel_config_policy_reference",u"signature_policy",b"signature_policy"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"Type",b"Type"]) -> typing_extensions___Literal["signature_policy","channel_config_policy_reference"]: ...
